name: Build and Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: windows
            arch: amd64
            ccompiler: x86_64-w64-mingw32-gcc
            ext: .exe
          - os: linux
            arch: amd64
            ccompiler: gcc
            ext: 
          - os: linux
            arch: arm64
            ccompiler: aarch64-linux-gnu-gcc
            ext: 
          - os: linux
            arch: arm
            ccompiler: arm-linux-gnueabihf-gcc
            ext: 

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21.4
        id: go

      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2

      - name: Install ARM cross-compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf libatomic1
          
      - name: Build
        id: build
        run: |
          CGO_ENABLED=1 CC=${{ matrix.ccompiler }} CGO_LDFLAGS="-latomic" GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o "varanny${{ matrix.ext }}" -v ./...
          zip ""varanny-${{ matrix.os }}-${{ matrix.arch }}.zip" "varanny${{ matrix.ext }}" "varanny.json"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        id: upload_release_assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: "*.zip"